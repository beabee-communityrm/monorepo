x-service-app: &service-app
  depends_on:
    # Wait for the database to be ready
    db:
      condition: service_healthy
    # Wait for the migration to be completed
    migration:
      condition: service_completed_successfully

x-backend-app: &backend-app
  <<: *service-app
  command: ["node", "--watch", "--watch-preserve-output", "./dist/app.js"]

services:
  db:
    image: postgres:13.9
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: membership_system
      POSTGRES_PASSWORD: membership_system
      POSTGRES_DB: membership_system
    # Healthcheck for the database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U membership_system"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - ${DB_PORT:?}:5432

  mail:
    image: maildev/maildev:2.1.0
    ports:
      - ${MAIL_PORT:?}:1080

  # Legacy app
  app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: legacy_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/legacy/dist:/opt/apps/legacy/dist

  # API app
  api_app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: api_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/backend/dist:/opt/apps/backend/dist
      - ./apps/backend-cli/dist:/opt/apps/backend-cli/dist
      # Allow migrations to be written out from the container
      - ./packages/core/src/migrations:/opt/packages/core/src/migrations
    # TODO: Use standard dist folder
    command: ["node", "--watch", "--watch-preserve-output", "./dist/api/app.js"]

  # Webhook app
  webhook_app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: webhook_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/webhooks/dist:/opt/apps/webhooks/dist

  # Cron app
  cron_app:
    <<: *service-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: cron_app
    env_file:
      - .env

  # MinIO service
  minio:
    build:
      context: .
      dockerfile: ./apps/minio/Dockerfile
    ports:
      - "${MINIO_PORT_ADMIN:?}:9000" # Admin port for debugging, not for production
      - "${MINIO_PORT_CONSOLE:?}:9001" # Console port (Admin UI), not for production
    volumes:
      - minio_data:/data
    environment:
      # Map our BEABEE_ prefixed vars to what MinIO expects
      MINIO_ROOT_USER: ${BEABEE_MINIO_ROOT_USER:?}
      MINIO_ROOT_PASSWORD: ${BEABEE_MINIO_ROOT_PASSWORD:?}
      MINIO_REGION: ${BEABEE_MINIO_REGION:?}
      # Pass BEABEE_ variables for our own use
      BEABEE_MINIO_BUCKET: ${BEABEE_MINIO_BUCKET:?}
      BEABEE_MINIO_ENDPOINT: ${BEABEE_MINIO_ENDPOINT:?}

  # The new frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      args:
        - VERSION=${VERSION}
        - REVISION=${REVISION}
    environment:
      APP_BASE_URL: ${BEABEE_AUDIENCE:?}
      API_BASE_URL: /api/1.0/
      CNR_MODE: ${BEABEE_CNR_MODE-}
      EXPERIMENTAL_FEATURES: ${BEABEE_EXPERIMENTAL_FEATURES-}
      APPSIGNAL_KEY: ${BEABEE_APPSIGNAL_KEY-}
      CAPTCHAFOX_KEY: ${BEABEE_CAPTCHAFOX_KEY-}
      MAPTILER_KEY: ${BEABEE_MAPTILER_KEY-}

  # Application router
  app_router:
    build:
      context: .
      dockerfile: ./apps/router/Dockerfile
    environment:
      LEGACY_APP_COOKIE_DOMAIN: ${BEABEE_COOKIE_DOMAIN:?}
      TRUSTED_ORIGINS: ${BEABEE_TRUSTEDORIGINS-}
    ports:
      - ${ROUTER_PORT:?}:80
    volumes:
      # Temporary storage for old uploads
      - upload_data:/old_data
    depends_on:
      - api_app
      - app
      - frontend
      - webhook_app

  # Database migration service
  migration:
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: api_app
    command: "yarn run typeorm migration:run"
    # Wait for the database to be ready
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./packages/core/dist/migrations:/opt/packages/core/dist/migrations
    env_file:
      - .env

  # Stripe CLI for webhook forwarding
  # Only used in local development
  stripe_cli:
    image: stripe/stripe-cli:latest
    command: "listen --api-key ${BEABEE_STRIPE_SECRETKEY:?} --forward-to webhook_app:3000/stripe"
    depends_on:
      - webhook_app
    environment:
      - STRIPE_API_KEY=${BEABEE_STRIPE_SECRETKEY:?}
      - STRIPE_DEVICE_NAME=beabee-dev-docker-container

volumes:
  db_data:
  minio_data:
  # Temporary storage for old uploads
  upload_data:
