x-service-app: &service-app
  depends_on:
    # Wait for the database to be ready
    db:
      condition: service_healthy
    # Wait for the migration to be completed
    migration:
      condition: service_completed_successfully

x-backend-app: &backend-app
  <<: *service-app
  command: ['node', '--watch', './dist/app.js']

services:
  db:
    image: postgres:13.9
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: membership_system
      POSTGRES_PASSWORD: membership_system
      POSTGRES_DB: membership_system
    # Healthcheck for the database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U membership_system"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - ${DB_PORT}:5432

  mail:
    image: maildev/maildev:2.1.0
    ports:
      - ${MAIL_PORT}:1080

  # Legacy app
  app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: legacy_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/legacy/dist:/opt/apps/legacy/dist

  # API app
  api_app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: api_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/backend/built:/opt/apps/backend/built
      - ./apps/backend-cli/dist:/opt/apps/backend-cli/dist
      # Allow migrations to be written out from the container
      - ./packages/core/src/migrations:/opt/packages/core/src/migrations
    # TODO: Use standard dist folder
    command: ['node', '--watch', './built/api/app.js']

  # Webhook app
  webhook_app:
    <<: *backend-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: webhook_app
    env_file:
      - .env
    volumes:
      - ./packages:/opt/packages
      - ./apps/webhooks/dist:/opt/apps/webhooks/dist

  # Cron app
  cron_app:
    <<: *service-app
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: cron_app
    env_file:
      - .env

  # MinIO service
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # Admin port for debugging, not for production
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client to initialize buckets
  minio_client:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: |
      /bin/sh -c '
      mc alias set myminio ${MINIO_ENDPOINT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb --ignore-existing myminio/${MINIO_BUCKET};
      mc mb --ignore-existing myminio/${MINIO_S3FS_BUCKET:-images-fs};
      mc policy set download myminio/${MINIO_BUCKET};
      mc policy set download myminio/${MINIO_S3FS_BUCKET:-images-fs};
      exit 0;
      '
    environment:
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://minio:9000}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET=${MINIO_BUCKET:-uploads}
      - MINIO_S3FS_BUCKET=${MINIO_S3FS_BUCKET:-images-fs}

  # Image upload handler with integrated s3fs
  img_upload_app:
    image: beabee/pictshare:v0.2.0
    privileged: true  # Needed for s3fs
    ports:
      - "2080:80"  # PictShare interface on port 2080 for debugging
    environment:
      URL: ${PICTSHARE_URL:-${BEABEE_AUDIENCE}/uploads/}
      # Image compression settings
      PNG_COMPRESSION: ${PICTSHARE_PNG_COMPRESSION:-6}
      JPEG_COMPRESSION: ${PICTSHARE_JPEG_COMPRESSION:-85}
      # S3 storage configuration
      S3_BUCKET: ${MINIO_BUCKET:-uploads}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      S3_REGION: ${MINIO_REGION:-us-east-1}
      # Environment for s3fs
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-http://minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_S3FS_BUCKET: ${MINIO_S3FS_BUCKET:-images-fs}
    volumes:
      - upload_data:/old_data:ro  # Mount old data read-only for migration
    entrypoint: |
      /bin/sh -c '
      # Install s3fs
      apk add --no-cache bash socat wget curl s3fs-fuse fuse
      
      # Create credentials file
      echo ${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD} > /etc/passwd-s3fs
      chmod 600 /etc/passwd-s3fs
      
      # Create data directory if not exists
      mkdir -p /var/www/data
      
      # Mount S3 bucket directly to the data directory
      echo "Mounting S3 bucket ${MINIO_S3FS_BUCKET} to /var/www/data"
      s3fs ${MINIO_S3FS_BUCKET} /var/www/data -o url=${MINIO_ENDPOINT} -o use_path_request_style -o allow_other -o nonempty -f -d -o dbglevel=info &
      
      # Give s3fs time to mount
      sleep 5
      
      # Verify mount
      df -h | grep s3fs
      mount | grep s3fs
      echo "Mount completed"
      
      # Migrate data if needed
      if [ -d "/old_data" ] && [ "$(ls -A /old_data 2>/dev/null)" ]; then
        echo "Migrating data from old volume to S3..."
        cp -r /old_data/. /var/www/data/
        echo "Migration completed"
      else
        echo "No data to migrate or old_data is empty"
      fi
      
      # Start the original script
      exec /etc/start.sh
      '
    depends_on:
      minio:
        condition: service_healthy
      minio_client:
        condition: service_completed_successfully
      image_migration:
        condition: service_completed_successfully

  # The new frontend
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      args:
        - VERSION=${VERSION}
        - REVISION=${REVISION}
    env_file:
      - ./apps/frontend/.env

  # Application router
  app_router:
    build:
      context: .
      dockerfile: ./apps/router/Dockerfile
    environment:
      LEGACY_APP_COOKIE_DOMAIN: ${BEABEE_COOKIE_DOMAIN}
      TRUSTED_ORIGINS: ${BEABEE_TRUSTEDORIGINS-}
    ports:
      - ${ROUTER_PORT}:80

  # Database migration service
  migration:
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: api_app
    command: 'npm run typeorm migration:run'
    # Wait for the database to be ready
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  # Image migration service
  # This is a temporary service that can be removed once all instances have been successfully migrated
  image_migration:
    build:
      context: .
      dockerfile: ./packages/docker/base.dockerfile
      target: api_app
    command: >
      /bin/sh -c "
      if [ \"$${MIGRATE_IMAGES}\" = \"true\" ]; then
        echo 'Starting image migration...' &&
        yarn backend-cli migrate-images --source=/old_data --endpoint=$${MINIO_ENDPOINT} --accessKey=$${MINIO_ROOT_USER:-minioadmin} --secretKey=$${MINIO_ROOT_PASSWORD:-minioadmin} --bucket=$${MINIO_BUCKET:-uploads};
      else
        echo 'Image migration skipped (MIGRATE_IMAGES is not set to true)' &&
        exit 0;
      fi
      "
    volumes:
      - upload_data:/old_data
      - ./packages:/opt/packages
      - ./apps/backend-cli/dist:/opt/apps/backend-cli/dist
    depends_on:
      migration:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
      minio_client:
        condition: service_completed_successfully
    environment:
      - MIGRATE_IMAGES=${MIGRATE_IMAGES:-true}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-http://minio:9000}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BUCKET=${MINIO_BUCKET:-uploads}
    env_file:
      - .env

  # Stripe CLI for webhook forwarding
  # Only used in local development
  stripe_cli:
    image: stripe/stripe-cli:latest
    command: "listen --api-key ${BEABEE_STRIPE_SECRETKEY} --forward-to webhook_app:3000/stripe"
    depends_on:
      - webhook_app
    environment:
      - STRIPE_API_KEY=${BEABEE_STRIPE_SECRETKEY}
      - STRIPE_DEVICE_NAME=beabee-dev-docker-container

volumes:
  db_data:
  upload_data:
  minio_data:
