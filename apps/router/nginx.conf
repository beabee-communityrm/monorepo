server {
  listen       80;
  listen  [::]:80;
  server_name  _;

  set $legacy_app "http://app:3000";
  set $api_app "http://api_app:3000";
  set $webhook_app "http://webhook_app:3000";
  set $img_upload_app "http://img_upload_app:80";
  set $frontend_app "http://frontend:80";

  # Use Docker DNS resolver
  resolver 127.0.0.11;

  proxy_cookie_domain ${LEGACY_APP_COOKIE_DOMAIN} $host;

  # Redirect old URLs to new ones
  absolute_redirect off;
  rewrite ^/login/?$ /auth/login permanent;

  # Gzip compression
  gzip on;
  gzip_vary on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss image/svg+xml;
  gzip_min_length 256;

  location /.well-known {
      root /usr/share/nginx/html;
  }

  # Frontend

  location ~ ^/(assets|profile|contacts|callouts|join|auth|admin|_theme|embed.js) {
    # Proxy scrapers to legacy app for metadata
    if ($http_user_agent ~* "linkedinbot|googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|facebookexternalhit|twitterbot|developers\.google\.com") {
        proxy_pass $legacy_app/share?uri=$request_uri;
    }

    include sec_headers;
    add_header Content-Security-Policy "frame-ancestors ${TRUSTED_ORIGINS}";
    # add_header Content-Security-Policy "default-src 'self'; font-src 'self' data: https://use.typekit.net; style-src 'self' 'unsafe-inline'; script-src 'self' https://js.stripe.com; frame-src https://js.stripe.com; connect-src 'self' https://api.stripe.com";

    proxy_pass $frontend_app;
  }

  # Backend

  include sec_headers;
  add_header Content-Security-Policy "frame-ancestors 'none'";
  #add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none'"

  location ~ ^/(robots\.txt|android-chrome|apple-touch-icon\.png|browserconfig\.xml|favicon|mstile|safari-pinned-tab\.svg|site\.webmanifest) {
    proxy_pass $legacy_app;
    access_log off;
    log_not_found off;
  }

  location ~ ^/api/(.*)$ {
      proxy_pass $api_app/$1$is_args$args;
  }

  location ~ ^/webhook/(.*)$ {
      proxy_pass $webhook_app/$1$is_args$args;
  }

  ## Upload handler
  # Authorise upload token then pass to image upload app
  location /upload/ {
      set $auth_request_uri $api_app/1.0/upload/$arg_token;
      auth_request /upload/auth;
      proxy_pass $img_upload_app/api/upload.php;
      client_max_body_size 20M;
      limit_except POST {
        deny all;
      }
  }

  # Internal route for handling upload authorisation
  location = /upload/auth {
      internal;
      client_max_body_size 20M; # Still needed even though body won't be sent
      proxy_pass $auth_request_uri;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_set_header X-Original-URI $request_uri;
  }

  # Only allow GET requests to image uploads
  location ~ ^/uploads/(.*)$ {
    proxy_pass $img_upload_app/${arg_w}x$arg_h/$1;
    limit_except GET {
        deny all;
    }
  }

  # Deny any external access to PHP files
  location ~ ^/uploads/.*\.php$ {
    deny all;
  }

  # Fallback route to the legacy app
  location / {
    #include sec_headers;
    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'";
    proxy_pass $legacy_app;
  }
}
