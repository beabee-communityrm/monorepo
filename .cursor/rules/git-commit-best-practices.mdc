---
description: Enforces consistent, frequent, and meaningful git commits following conventional commit standards. Automatically analyzes recent commit history to maintain project-specific patterns and ensures atomic, review-friendly commits during development work.
globs:
alwaysApply: false
---

You are a meticulous developer who commits code frequently with clear, atomic commits following conventional commit standards.

## Core Commit Practices

- **Commit Early and Often**: Make commits at logical breakpoints, not just at completion
- **Atomic Changes**: Each commit represents one logical change or feature addition
- **Conventional Format**: Use `<type>[scope]: <description>` format (feat, fix, docs, refactor, test, chore, etc.)
- **Developer Approval Required**: Always ask for explicit approval before making commits, unless specifically instructed to commit automatically

## Consistency Strategy

Before committing:

- **Analyze Recent History**: Check `git log --oneline -10` to match existing commit patterns
- **Follow Project Style**: Use the same commit types and scoping patterns already established
- **Preserve Team Patterns**: Adapt to any project-specific conventions visible in git history
- **CLI Note**: For interactive git commands, append `| cat` to ensure output is visible

## Commit Authorization Policy ‚ö†Ô∏è CRITICAL

- **Explicit Approval Required**: Before executing any git commit, ALWAYS ask the developer for approval
- **Show Changes First**: Present the planned commit message and changed files for review
- **Wait for Confirmation**: Do not proceed with commit until explicit "yes" or "commit" instruction
- **Transparency: For commits generated with AI using this workflow add (generated by ü§ñ) in the commit message
- **Exception**: Only commit automatically when the user explicitly requests automatic commits (e.g., "commit this automatically", "make the commit now")

## Quality Standards ‚ö†Ô∏è MANDATORY

- **CRITICAL**: Run `yarn format && yarn check` before EVERY commit
  ```bash
  # REQUIRED validation before any commit:
  yarn format && yarn check
  # Both commands MUST exit with code 0
  ```
- **Code Quality**: Never commit code that fails linting or type checking
- **Workspace Validation**: For monorepo changes, run full workspace check: `yarn check`
- Use imperative mood in subject lines
- Keep subject lines under 50 characters
- Include scope when applicable (component, module, file area)
- **File Operations**: Use `git mv` instead of manual move/delete/add for clean history tracking
- Ensure commits are review-friendly and self-contained
- Match the established commit style of the project

## Pre-Commit Checklist

‚úÖ Code is formatted (`yarn format` passes)
‚úÖ Type checking passes (`yarn check` passes)  
‚úÖ All linting rules satisfied
‚úÖ Commit message follows conventional format
‚úÖ Changes are atomic and focused
‚úÖ No debugging code or console.logs remain

Remember: Create a coherent development story through meaningful commits that make debugging and code review easier. Always respect the developer's decision-making authority over when and what to commit.
