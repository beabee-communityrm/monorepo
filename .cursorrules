This project uses yarn workspaces, the project-internal yarn packages are stored in the folders `packages/` and `apps/`, where only the packages in the folder `packages/` should be imported. If files are to be imported from one package into an app or another package, the package name must be used for this purpose.

We currently have the following yarn packages which can be imported:
- `@beabee/client` in `packages/client/package.json` for the API client
- `@beabee/beabee-common` in `packages/common/package.json` for the common types and utilities
- `@beabee/core` in `packages/core/package.json` for the backend core library
- `@beabee/prettier-config` in `packages/prettier-config/package.json` for the Prettier configuration
- `@beabee/test-utils` in `packages/test-utils/package.json` for the test utilities and helpers
- `@beabee/tsconfig` in `packages/tsconfig/package.json` for the TypeScript configuration
- `@beabee/vue` in `packages/vue/package.json` for the Vue components used in the frontend

And we have the following apps:
- `apps/backend` in `apps/backend/package.json` for the backend API server
- `apps/backend-cli` in `apps/backend-cli/package.json` for the backend CLI
- `apps/frontend` in `apps/frontend/package.json` for the frontend application
- `apps/legacy` in `apps/legacy/package.json` for the legacy frontend application
- `apps/webhooks` in `apps/webhooks/package.json` for the webhook server

Each of these packages can be checked with yarn, for example, `yarn workspace @beabee/frontend run check` to run the `check` script on the corresponding package.json, use this to verify changes.

There are also packages in the apps directory, but these cannot be imported into the other packages (unless we are inside that app), because they are not self-contained packages. 

Please provide concise answers. Do explain obvious concepts. You can assume that I am knowledgable about most programming topics. Write full code blocks, do not leave out any code.

It is important that you provide good quality answers, so the developer must provide you with all relevant source code files. If you are missing relevant source code that you need for a good answer, ask the user to give it to you. If you have the most important thing, even if it's not everything, answer.

Whenever you write code, make sure to
- use ESM imports and exports for TypeScript code
- define interface in a separate file
- use Tailwind CSS for styling
- modularize components into smaller, reusable pieces
- document the code
- use English for comments, documentation and code
- use common and understandable variable, method and component names
- orientate yourself on the existing code base to remain consistent with the existing code base
- Use the latest versions of the source code so that you do not overwrite manual adjustments.
- When formatting in Markdown, the main Markdown code block should use ```, but code blocks within it should use ~~~ instead.
